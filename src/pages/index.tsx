import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';

import { gql, useQuery } from '@apollo/client';
import { ArcElement, Chart as ChartJS, Legend, Tooltip } from 'chart.js';
import { useMemo } from 'react';
import { Doughnut } from 'react-chartjs-2';

ChartJS.register(ArcElement, Tooltip, Legend);

const colors = ['#7579E7', '#47F759', '#EF4E69', '#F8CA47'];
const Home: NextPage = () => {
  const totalArtists = useQuery(gql`
    query {
      listArtists(take: 50, skip: 1, order: DESC) {
        totalCount
      }
    }
  `);

  const totalAlbums = useQuery(gql`
    query {
      listAlbums(take: 50, skip: 1, order: DESC) {
        totalCount
      }
    }
  `);

  const totalPlaylists = useQuery(gql`
    query {
      listPlaylists(take: 50, skip: 1, order: DESC) {
        totalCount
      }
    }
  `);

  const totalTracks = useQuery(gql`
    query {
      listTracks(take: 50, skip: 1, order: DESC) {
        totalCount
      }
    }
  `);

  const total = useMemo(() => {
    return {
      artists: totalArtists?.data?.listArtists?.totalCount ?? 0,
      albums: totalAlbums?.data?.listAlbums?.totalCount ?? 0,
      playlists: totalPlaylists?.data?.listPlaylists?.totalCount ?? 0,
      tracks: totalTracks?.data?.listTracks?.totalCount ?? 0
    };
  }, [totalArtists, totalAlbums, totalPlaylists, totalTracks]);

  // console.log(totalArtists?.data?.listArtists?.totalCount);
  return (
    <div className={styles.container}>
      <Head>
        <title>RhythmMusic</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
          justifyContent: 'center',
          height: '100vh',
          overflow: 'none'
        }}
      >
        <h1>RhythmMusic</h1>
        <h3>_WhiL</h3>

        <div
          style={{
            position: 'relative',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center'
          }}
        >
          <div>
            <h1
              style={{
                top: 0,
                left: 0,
                right: 0,
                bottom: 0
              }}
            >
              TOTAL <br />
              {Object.values(total)
                ?.reduce((acc, curr) => acc + curr, 0)
                ?.toFixed(2)
                .replace(/\B(?=(\d{3})+(?!\d))/g, `,`)}
            </h1>
            <ul
              style={{
                paddingInlineStart: '16px'
              }}
            >
              {Object.entries(total)
                .map((item) => ({
                  label: item[0],
                  value: item[1]
                }))
                .sort(function (a, b) {
                  return b.value - a.value; // Orden de mayor a menor
                })
                .map((item) => (
                  <li key={item.label}>
                    {item.label.toUpperCase()}
                    {'   '}
                    {item.value
                      ?.toFixed(2)
                      .replace(/\B(?=(\d{3})+(?!\d))/g, `,`)}
                  </li>
                ))}
            </ul>
          </div>
          <Doughnut
            data={{
              labels: Object.entries(total)
                .map((item) => ({
                  label: item[0],
                  value: item[1]
                }))
                .sort(function (a, b) {
                  return b.value - a.value; // Orden de mayor a menor
                })
                .map((item) => item.label),
              datasets: [
                {
                  label: 'Requests',
                  data: Object.entries(total)
                    .map((item) => ({
                      label: item[0],
                      value: item[1]
                    }))
                    .sort(function (a, b) {
                      return b.value - a.value; // Orden de mayor a menor
                    })
                    .map((item) => item.value),
                  backgroundColor: colors,
                  borderColor: colors,
                  borderWidth: 1
                }
              ]
            }}
            style={{
              height: 200,
              width: 200
            }}
          />
        </div>
      </div>
      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
